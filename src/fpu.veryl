embed (inline) sv{{{
  /*verilator lint_off WIDTHEXPAND*/
}}}

package FP {
    const sign_bits: u8 = 1;
    const exp_bits : u8 = 8;
    const man_bits : u8 = 23;

    struct fp_num {
        s: logic<sign_bits>,
        e: logic<exp_bits> ,
        m: logic<man_bits> ,
    }

    function subtract (
        X: input fp_num,
        Y: input fp_num,
    ) -> fp_num {
        // flipped sign copy of Y
        var Yy  : fp_num;
        Yy   = Y;
        Yy.s = ~Yy.s;
        return add(X, Yy);
    }

    function add (
        X: input fp_num,
        Y: input fp_num,
    ) -> fp_num {

        $display("x = %d, %d, %d", X.s, X.e, X.m);
        $display("y = %d, %d, %d", Y.s, Y.e, Y.m);
        ////////////
        //// fp addition:
        ////////////

        // select larger magnitude, put at A
        var Am: u32     ;
        var Bm: u32     ;
        var Ae: i32     ;
        var Be: i32     ;
        var As: logic<1>;
        var Bs: logic<1>;
        if (X.e >: Y.e) {
            Am = X.m;
            Bm = Y.m;
            Ae = X.e - 127;
            Be = Y.e - 127;
            As = X.s;
            Bs = Y.s;

        } else {
            Am = Y.m;
            Bm = X.m;
            Ae = Y.e - 127;
            Be = X.e - 127;
            As = Y.s;
            Bs = X.s;
        }

        // normalize the sum: ensure the "secret bit" beyond the mantissa is 1
        // add the implicit leading one on mantissas, unless Ae is -127
        Am = if (Ae != -127) ? (Am | (1 << man_bits)) : Am;
        Bm = if (Be != -127) ? (Bm | (1 << man_bits)) : Bm;

        $display("A = %d, %d, %d", As, Ae, Am);
        $display("B = %d, %d, %d", Bs, Be, Bm);


        // Align mantissas

        // check that the shifting would not = 0, skip if no need for shift
        let diff      : u32 = Ae - Be;
        let Bm_shifted: u32 = if (diff >= man_bits + 2) ? 0 : (Bm >> diff);

        var m_sum: u32   ;
        var e_sum: i32   ;
        var sum  : fp_num;

        e_sum = Ae;

        // Determine addition or subtraction of mantissas
        if (As == Bs) {
            // same sign → add
            m_sum = Am + Bm_shifted;
            sum.s = As;
        } else {
            // opposite signs → subtract
            if (Am >= Bm_shifted) {
                m_sum = Am - Bm_shifted;
                sum.s = As; // A had larger magnitude
            } else {
                m_sum = Bm_shifted - Am;
                sum.s = Bs; // B had larger magnitude
            }
        }

        $display("output 1: %d, %d, %d", sum.s, e_sum, m_sum);

        // if mantissa too large,
        if (m_sum >= (1 << (man_bits + 1))) {
            $display("normalize once", m_sum);
            // shift right, inc exponent
            m_sum =  m_sum >> 1;
            e_sum += 1;
        } else {
            // if mantissa too small,
            for i: i32 in 0..100 { //NOTE: while loop please
                if (m_sum <: (1 << man_bits) && e_sum >: -126) {
                    $display("normalize loop", m_sum);
                    // mantissa too small, move up
                    // shift left, dec exponent until done
                    m_sum =  m_sum << 1;
                    e_sum -= 1;
                }
            }
        }

        // Restore implied Exp offset
        e_sum += 127;
        // Restore implied Mantessa leading 1
        // (only if normalized)
        if (e_sum != 0 && ((m_sum & (1 << man_bits)) != 0)) {
            m_sum = m_sum & ((1 << man_bits) - 1);
        }

        $display("output 2: %d, %d, %d", sum.s, e_sum, m_sum);

        // now we check that all the bits fit and other edge cases
        if (e_sum >= (2 ** exp_bits) - 1) {
            $display("overflow", sum);
            sum.e    = 255;
            sum.m    = 0;
            return sum;
        } else if (e_sum <: 0) {
            //TODO:
            $display("underflow", sum);
            return 69.0 as fp_num;
        }

        // truncate and package
        sum.m    = m_sum[man_bits - 1:0];
        sum.e    = e_sum[exp_bits - 1:0];
        $display("output fin: %d, %d, %d", sum.s, sum.e, sum.m);
        return sum;
    }
}

module fp_unit (
    X      : input  logic<32>,
    Y      : input  logic<32>,
    out    : output logic<32>,
    i_clk  : input  clock    ,
    i_rst  : input  reset    ,
    i_start: input  logic    ,
    i_done : output logic    ,
) {
    import FP::*;

    enum FPU_state: u8 {
        idle,
        work,
        done,
    }
    var state: FPU_state;

    var add_res: logic<32>;
    always_ff {
        if_reset {
            $display("reset hit!");
            state    = FPU_state::idle;
        } else {
            case (state) {
                FPU_state::idle: {
                    $display("idle state");
                    if i_start {
                        $display("computing!");
                        add_res  = add(X, Y);
                        state    = FPU_state::work;
                    }
                }
                FPU_state::work: {
                    $display("working");
                    out      = add_res;
                    $display("output is %f", add_res);
                    i_done   = 1;
                    state    = FPU_state::done;
                }
                FPU_state::done: {
                    if (i_start) {
                        $display("done, waiting for ack");
                    } else {
                        $display("done, ack complete");
                        i_done   = 0;
                        state    = FPU_state::idle;
                    }
                }
                default: {
                    $display("unexpected state! plsfix");
                }
            }
        }
    }
}
